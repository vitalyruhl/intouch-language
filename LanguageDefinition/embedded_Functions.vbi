{Strings}
DText( Discrete_Tag, OnMsg, OffMsg );
StringASCII( Char );
StringChar( ASCII );
StringCompare( Text1, Text2 );
StringCompareNoCase( Text1, Text2 );
StringFromGMTTimeToLocal( SecsSince1-1-70, StringType );
StringFromIntg( Number, Base );
StringFromReal( Number, Precision, Type );
StringFromTime( SecsSince1-1-70, StringType );
StringFromTimeLocal( SecsSince1-1-70, StringType );
StringInString( Text, SearchFor, StartPos, CaseSens );
StringLeft( Text, Chars );
StringLen( Text );
StringLower( Text );
StringMid( Text, StartChar, Chars );
StringReplace( Text, SearchFor, ReplaceWith, CaseSens, NumToReplace, MatchWholeWords );
StringRight( Text, Chars );
StringSpace( NumSpaces );
StringTest( Text, TestType );
StringToIntg( Text );
StringToReal( Text );
StringTrim( Text, TrimType );
StringUpper( Text );
Text( Analog_Tag, Format_Text );
wwStringFromTime( Time, Format );

{Math}
Abs( Number );
ArcCos( Number );
ArcSin( Number );
ArcTan( Number );
Clip_cursor( left, top, right, bottom, bSetClient );
ConvertTemp( Value, FromUnits, ToUnits );
Cos( Degrees );
Exp( Number );
GeoArea( Base, Height, Shape );
GeoEqualSideArea( SideLength, NumOfSides );
GeoVolume( Base, Height, Width, Shape );
GetCursorPosition( X_Tag, Y_Tag, bSetClient );
Hide_cursor(  );
Int( Number );
Log( Number );
LogN( Number, Base );
MetFromStdFluid( StandardValue, StandardUnits, MetricUnits );
MetFromStdLinear( StandardValue, StandardUnits, MetricUnits );
MetFromStdWeight( StandardValue, StandardUnits, MetricUnits );
Pi();
Restore_clip(  );
Round( Number, Precision );
SetCursorPosition( X_Position, Y_Position, bSetClient );
Sgn( Number );
Show_cursor(  );
Sin( Degrees );
Sqrt( Number );
StdFromMetFluid( MetricValue, MetricUnits, StandardUnits );
StdFromMetLinear( MetricValue, MetricUnits, StandardUnits );
StdFromMetWeight( MetricValue, MetricUnits, StandardUnits );
Tan( Degrees );
Trunc( Number );


{System}
ActivateApp
CreateFilenameFromDate( Format, Prefix, Postfix, DayOffset );
FileCopy( SourceFile, DestFile, DoneTag );
FileDelete( Filename );
FileMove( SourceFile, DestFile, DoneTag );
FileReadFields( Filename, FileOffset, StartTag, NumberOfFields );
FileReadMessage( Filename, FileOffset, Message_Tag, CharsToRead );
FileWriteFields( Filename, FileOffset, StartTag, NumberOfFields );
FileWriteMessage( Filename, FileOffset, Message_Tag, LineFeed );
GetDiscOffMsg( Tagname );
GetDiscOnMsg( Tagname );
InfoAppActive( AppTitle );
InfoAppTitle( ProgramEXEName );
InfoDisk( Drive, InfoType, Trigger );
InfoDosEnv( EnvironmentVar );
InfoFile( Filename, InfoType, Trigger );
InfoInTouchAppDir();
InfoResources( ResourceType, Trigger );
INIReadInteger( FileName, Section, Key );
INIReadString( FileName, Section, Key );
INIWriteInteger( FileName, Section, Key, Value );
INIWriteString( FileName, Section, Key, Message );
IORRGetItemActiveState( ItemPath, Options);
IORRGetSystemInfo( Options );
IORRWriteState( FilePath, Options, Arguments );
IsNodeAppRunning( ComputerName, ProgramName );
ITXCreateDirectory( DirectoryName );
ITXCreateSubDirectory ( DirectoryName );
ITXGetProfileInt ( Section, Entry );
ITXGetProfileString ( Section, Entry );
ITXPutProfileInt ( Section, Entry, IntegerValue );
ITXPutProfileString ( Section, Entry, MessageValue );
ITXRemoveDirectory ( DirectoryName );
ITXRemoveSubDirectory ( DirectoryName );
ITXResizeApplication ( AppTitleString, XPos, YPos, Width, Height );
ITXSetLocalTime ( hour, minute, second );
ITXSetSystemDate ( year, month, day );
ITXSetSystemTime ( hour, minute, second );
ITXStartAppInDirectory ( AppPath, StartupDirectory );
ITXWindowCtrl ( ApplicationTitleString, Feature, OnOff );
SetTagEU( Tagname, Message );
StartApp
SysBeep() ;
SystemIsNT( );
TagExists( Tagname );
WWBeep32( Freq_37to14000, Dur_msecs );
WWCntx32( WindowName, Left, Top, Width, Height, Tagname, Value );
WWGetServiceExeName( ServiceDisplayName );
WWGetServiceName( ServiceExeName );
WWGetServiceStatus( ServiceExeName );
WWServiceControl( ServiceName, Command );
WWServiceControlError( ErrorCode );
WWShutDownWin95( ShutDownFlag );
WWShutDownWinNT40( ShutDownFlag );

{Add-Ons}
RecipeDelete( FileName, RecipeName );
RecipeGetMessage( Analog_Tag, Message_Tag, Number );
RecipeLoad( FileName, UnitName, RecipeName );
RecipeSave( FileName, UnitName, RecipeName );
RecipeSelectNextRecipe( FileName, RecipeName, Number );
RecipeSelectPreviousRecipe( FileName, RecipeName, Number );
RecipeSelectRecipe( FileName, RecipeName, Number );
RecipeSelectUnit( FileName, UnitName, Number );
SPCEXSetDataset( DatasetName );
SPCEXSetEndDate( EndYear, EndMonth, EndDay );
SPCEXSetEndTime( EndHour, EndMin, EndSec );
SPCEXSetOutputFile( OutputFileName );
SPCEXSetProduct( ProductName );
SPCEXSetStartDate( StartYear, StartMonth, StartDay );
SPCEXSetStartTime( StartHour, StartMin, StartSec );
SQLAppendStatement( ConnectionId, SQLStatement );
SQLClearParam( StatementId, ParameterNumber );
SQLClearStatement( ConnectionId, StatementId  );
SQLClearTable( ConnectionId, TableName );
SQLCommit( ConnectionId );
SQLConnect( ConnectionId, ConnectString );
SQLCreateTable( ConnectionId, TableName, TemplateName );
SQLDelete( ConnectionId, TableName, WhereExpr );
SQLDisconnect( ConnectionId );
SQLDropTable( ConnectionId, TableName );
SQLEnd( ConnectionId );
SQLErrorMsg( ResultCode );
SQLExecute( ConnectionId, BindList, StatementId );
SQLFirst( ConnectionId );
SQLGetRecord( ConnectionId, RecordNumber );
SQLInsert( ConnectionId, TableName, BindList );
SQLInsertEnd( ConnectionId, StatementId );
SQLInsertExecute( ConnectionId, BindList, StatementId );
SQLInsertPrepare( ConnectionId, TableName, BindList, StatementId );
SQLLast( ConnectionId );
SQLLoadStatement( ConnectionId, FileName );
SQLManageDSN( ConnectionId );
SQLNext( ConnectionId );
SQLNumRows( ConnectionId );
SQLPrepareStatement( ConnectionId, StatementId );
SQLPrev( ConnectionId );
SQLRollback( ConnectionId );
SQLSelect( ConnectionId, TableName, BindList, WhereExpr, OrderByExpr );
SQLSetParamChar( StatementId, ParameterNumber, Value, Length );
SQLSetParamDate( StatementId, ParameterNumber, Value );
SQLSetParamDateTime( StatementId, ParameterNumber, Value, Precision );
SQLSetParamDecimal( StatementId, ParameterNumber, Value, Precision, Scale );
SQLSetParamFloat( StatementId, ParameterNumber, Value );
SQLSetParamInt( StatementId, ParameterNumber, Value );
SQLSetParamLong( StatementId, ParameterNumber, Value );
SQLSetParamNull( StatementId, ParameterNumber, Type, Precision, Scale );
SQLSetParamTime( StatementId, ParameterNumber, Value );
SQLSetStatement( ConnectionId, SQLStatement );
SQLTransact( ConnectionId );
SQLUpdate( ConnectionId, TableName, BindList, WhereExpr );
SQLUpdateCurrent( ConnectionId );

{ground}

Ack
AddPermission( Domain, Group, AccessLevel );
almAckAll( "objectName", Comment );
almAckDisplay( "objectName", Comment );
almAckGroup( "objectName", ApplicationName, Group, AckComment );
almAckPriority( "objectName", ApplicationName, GroupName, FromPri, ToPri, AckComment );
almAckRecent( "objectName", Comment );
almAckSelect( "objectName", Comment );
almAckSelectedGroup( "objectName", Comment );
almAckSelectedPriority( "objectName", Comment );
almAckSelectedTag( "objectName", Comment );
almAckTag( "objectName", ApplicationName, GroupName, AlarmTagName, FromPri, ToPri, AckComment );
almDefQuery( "objectName" );
almMoveWindow( "objectName", moveOption, repeatCount );
almQuery( "objectName", AlarmGroup, FromPri, ToPri, State, DispType );
almSelectAll( "objectName" );
almSelectGroup( "objectName", ApplicationName, Group );
almSelectionCount( "objectName" );
almSelectItem( "objectName" );
almSelectPriority( "objectName", ApplicationName, GroupName, FromPri, ToPri );
almSelectTag( "objectName", ApplicationName, GroupName, AlarmTagName, FromPri, ToPri );
almSetQueryByName( "objectName", QueryName );
almShowStats( "objectName" );
almSuppressAll( "objectName" );
almSuppressDisplay( "objectName" );
almSuppressGroup( "objectName", ApplicationName, Group );
almSuppressPriority( "objectName", ApplicationName, GroupName, FromPri, ToPri );
almSuppressRetain( "objectName", SuppressionRetainFlag);
almSuppressSelected( "objectName" );
almSuppressSelectedGroup( "objectName" );
almSuppressSelectedPriority( "objectName" );
almSuppressSelectedTag( "objectName" );
almSuppressTag( "objectName", ApplicationName, GroupName, AlarmTagName, FromPri, ToPri );
almUnselectAll( "objectName");
almUnsuppressAll( "objectName");
AnnotateLayout();
APUFindAlarmGroupInstance( sGroup, iTagInstance );
APUFindFileInstance( sFilePath, iTagInstance );
APUFindPrinterInstance( sPrinter, iTagInstance );
APUGetAlarmGroupText( iInstance, sTagGroup );
APUGetConfigurationFilePath( iInstance, sTagFilePath );
APUGetInstanceCount( iTagCount );
APUGetPrinterJobCount( iInstance, iTagCount );
APUGetPrinterName( iInstance, sTagPrinter );
APUGetPrinterStatus( iInstance, iSelector, iTagStatus );
APUGetQueryAlarmState( iInstance, iTagState );
APUGetQueryFromPriority( iInstance, iTagPriority );
APUGetQueryProcessingState( iInstance, iTagState );
APUGetQueryToPriority( iInstance, iTagPriority );
APUIsInstanceUsed( iInstance );
APUSetAlarmGroupText( iInstance, sGroup );
APUSetQueryAlarmState( iInstance, iState );
APUSetQueryFromPriority( iInstance, iPriority );
APUSetQueryToPriority( iInstance, iPriority );
APUSetTimeoutValues( iMemory, iShort, iLong );
APUStartInstance( sFilePath, iTagInstance );
APUStartQuery( iInstance, iYear, iMonth, iDay, iHour, iMinute );
APUStopInstance( iInstance );
APUStopQuery( iInstance );
APUTranslateErrorCode( iErrorCode, sTagMesage );
AttemptInvisibleLogon( UserId, Password, Domain );
ChangePassword( );
ChangeWindowColor( WindowName,RValue,GValue,BValue );
CreateFilenameFromDate( Format, Prefix, Postfix, DayOffset );
DateTimeGMT( );
DialogStringEntry( MessageTag_Text, UserPrompt_Text );
DialogValueEntry( ValueTag_Text, LowLimit, HighLimit, UserPrompt_Text );
EnableDisableKeys(AltKey,EscKey,WinKey);
FilePrint( FileName, InitState );
FileSelect( Title, DefaultDirectory, DefaultExtension, DefaultFilename );
GetAccountStatus( Domain, UserID );
GetDiscOffMsg( Tagname );
GetDiscOnMsg( Tagname );
GetNodeName( Tagname, NodeNum );
GetPropertyD ( "ControlName.Property", Tagname );
GetPropertyI ( "ControlName.Property", Tagname );
GetPropertyM ( "ControlName.Property", Tagname );
GetWindowName(Tagname);
Hide
HideSelf

HTGetLastError( Hist_Tag, UpdateCount, PenNum );
HTGetPenName( Hist_Tag, UpdateCount, PenNum );
HTGetTimeAtScooter( Hist_Tag, UpdateCount, ScootNum, ScootLoc );
HTGetTimeStringAtScooter( Hist_Tag, UpdateCount, ScootNum, ScootLoc, Format_Text );
HTGetValue( Hist_Tag, UpdateCount, PenNum, ValType_Text );
HTGetValueAtScooter( Hist_Tag, UpdateCount, ScootNum, ScootLoc, PenNum, ValType_Text );
HTGetValueAtZone( Hist_Tag, UpdateCount, Scoot1Loc, Scoot2Loc, PenNum, ValType_Text );
HTScrollLeft( Hist_Tag, Percent );
HTScrollRight( Hist_Tag, Percent );
HTSelectTag( );
HTSetPenName( Hist_Tag, PenNum, Tagname );
HTUpdateToCurrentTime( Hist_Tag );
HTZoomIn( Hist_Tag, LockString );
HTZoomOut( Hist_Tag, LockString );
InfoAppStatus( WindowName, DesiredState, ErrorCode, Trigger );
InfoAppTitleExpand( PartialWindowName );
InfoWinEnv( EnvironmentVariable );
InTouchVersion( VersionType )
InvisibleVerifyCredentials( UserId, Password, Domain );
IODisableFailover(Accessname,Option);
IOForceFailover( AccessName);
IOGetAccessNameStatus(Accessname,Mode);
IOGetActiveSourceName(Accessname);
IOGetApplication( AccessName );
IOGetNode( AccessName );
IOGetTopic( AccessName );
IOReinitAccessName( AccessName, Default);
IOReinitialize( );
IOSetAccessName( AccessName, NodeName, AppName, TopicName );
IOSetItem( Tagname, AccessName, ItemName );
IOSetRemoteReferences( BaseAccess, NewAccess, MatchString, SubstituteString, Mode );
IOStartUninitConversations( );
IsAnyAsyncFunctionBusy
IsAssignedRole( RoleName );
ITXAppActivate ( ApplicationTitleString, DisplayMode );
ITXCheckDate ( year, month, day );
ITXConvertDate ( ITDate, year, month, day );
ITXConvertDateString ( DateString, year, month, day );
ITXConvertDateTime ( ITDateTime, year, month, day, hour, minute, second );
ITXConvertDateTimeString ( DateTimeString, year, month, day, hour, minute, second );
ITXCreateDate ( year, month, day );
ITXCreateDateTime ( year, month, day, hour, minute, second );
ITXCreateDateTimeUTC ( year, month, day, hour, minute, second );
ITXShowHelpByNumber ( HelpFileName, HelpContextID );
ITXShowHelpByString ( HelpFileName, HelpKeyword );
LaunchTagViewer( );
LogMessage( Message_Tag );
Logoff();
LogonCurrentUser();
MessageBox( Message, Title, Style );
MoveWindow( WindowName, Left, Top, Width, Height );
NumberRecipes( RecipieFileName );
OpenWindowsList( );
PlaySound( SoundName, Flags );
PostLogonDialog();
PrintHT( Trend_Tag );
PrintScreen( ScreenOption, PrintOption );
PrintWindow( Window, Left, Top, Width, Height, Options );
ptGetTrendType(trendObjName);
ptLoadTrendCfg(trendObjName, fileName);
ptPanCurrentPen(trendObjName, majorUnits, minorUnits);
ptPanTime(trendObjName, majorUnits, minorUnits);
ptPauseTrend(trendObjName, paused);
ptRefreshTrend(trendObjName);
ptSaveTrendCfg(trendObjName, fileName);
ptSetCurrentPen(trendObjName, penNum);
ptSetPen(trendObjName, penNum, tagName);
ptSetPenEx(trendObjName, penNum, tagName, minEU, maxEU, minPercent, maxPercent, decimal, EU);
ptSetTimeAxis(trendObjName, startDateTime, endDateTime);
ptSetTimeAxisToCurrent(trendObjName);
ptSetTrend(trendObjName, enableUpdates);
ptSetTrendType(trendObjName, type);
ptZoomCurrentPen(trendObjName, percentage);
ptZoomTime(trendObjName, percentage);
PwdUserAdd(path, username, acclevel, password);
PwdUserDelete(path, username);
PwdUserEdit(path, username, acclevel, password);
PwdUserGetIndex(path, username);
PwdUserRead(path, idx, username, acclevel, password);
QueryGroupMembership( Domain, Group );
ReloadWindowViewer( );
RestartWindowViewer( );
SendKeys
SendMail( Recipient, FileName );
SendSMTPMail( SMTPServerName, SenderEMail, RecipientEMail, Subject, FileName );
SendSMTPMailwAttachment( SMTPServerName, SenderEMail, RecipientEMail, Subject, BriefNote, AttachmentPath );
SetPropertyD ( "ControlName.Property", DiscreteTag );
SetPropertyI ( "ControlName.Property", Number );
SetPropertyM ( "ControlName.Property", MessageTag );
SetTagEU( Tagname, Message );
SetWindowPrinter( PrinterName );
Show
ShowAt( Window, Horiz, Vert );
ShowHome

ShowTopLeftAt( Window, Horiz, Vert );
StringCompareEncrypted(sPlaintextString,MessageTag);
SwitchDisplayLanguage(LocaleID);
SysBeep() ;
SystemIsNT( );
TagExists( Tagname );

TseGetClientId( );
TseGetClientNodeName( );
TseQueryRunningOnClient( );
TseQueryRunningOnConsole( );
UTCDateTime( Format );
wcAddItem ( "ControlName", MessageTag );
wcClear ( "ControlName" );
wcDeleteItem ( "ControlName", ItemIndex );
wcDeleteSelection ( "ControlName" );
wcErrorMessage ( ErrorNumber );
wcFindItem ( "ControlName", MessageTag, DiscreteTag, Tagname );
wcGetItem ( "ControlName", ItemIndex, Tagname );
wcGetItemData ( "ControlName", ItemIndex, Tagname );
wcInsertItem ( "ControlName", ItemIndex, MessageTag );
wcLoadList ( "ControlName", "Filename"  );
wcLoadText ( "ControlName", "Filename" );
wcSaveList ( "ControlName", "Filename" );
wcSaveText ( "ControlName", "Filename" );
wcSetItemData ( "ControlName", ItemIndex, Tagname );
WindowState( WindowName );
WWAlwaysOnTop( WindowName, NewState);
WWBeep32( Freq_37to14000, Dur_msecs );
WWCntx32( WindowName, Left, Top, Width, Height, Tagname, Value );
WWContext( WindowName, Left, Top, Width, Height, Tagname, Value) );
WWControl( AppTitle, ControlType );
WWControlPanel( AppletName );
WWDosCommand( DOSCmdLine, InitState );
WWExecute( App, Topic, Command );
WWIsDayLightSaving( );
WWMoveWindow( WindowName, Left,Top,Width,Height );
WWMultiMonitorNode();
WWPoke( App, Topic, Item, TextValue );
WWPrimaryMonitorHeight();
WWPrimaryMonitorWidth();
WWRequest( App, Topic, Item, ValueMsg_Tag );
WWStartApp( WindowsAppName, InitState );
WWVirtualMonitorHeight();
WWVirtualMonitorWidth();


{Quickfunctions Hermes}
call GetSplittByIndex( sInputString as Message, sDelimiter as Message, iIndex as Integer);
call HerGATEWAYanzeigeAktualisieren( );
call HerGATEWAYtriggerFreigabe( freigabe as Discrete);
call HerGATEWAYueberwachen( );
call SetReferenceBool( Topic as Message, db as Integer, byte as Integer, bit as Integer);
call SetReferenceByte( Topic as Message, DB as Integer, byte as Integer);
call SetReferenceDINT( topic as Message, db as Integer, Adresse as Integer);
call SetReferenceDINTs( Topic as Message, DB as Integer, Adresse as Integer);
call SetReferenceMerkerByte( Topic as Message, MerkerByte as Integer);
call SetReferenceReal( Topic as Message, db as Integer, Adresse as Integer);
call SetReferenceString( topic as Message, DB as Integer, Byte as Integer, Laenge as Integer);
call SetReferenceWord( Topic as Message, db as Integer, byte as Integer);
call SetVarInputBoolsch( varname as Message);
call SetVarToggleBoolsch( varname as Message);

call BDEDatenLesen( Jahr as Integer, Monat as Integer, Tag as Integer);
call BDEDatenSpeichern( Jahr as Integer, Monat as Integer, Tag as Integer);
call BDEDatenSuchen( Jahr as Integer, Monat as Integer, Tag as Integer);
call BDESchichtSchreiben( Schichtnr as Integer);
call BDESchichtwerteDatenOK( );
call BDESchichtwerteZuweisen( );
call BDETageswerteDatenOK( );
call BDETageswerteSchreiben( );
call BDETageswerteZuweisen( );
call BZBetriebsstunden( );
call BZZaehlerAbfragen( );
call ExterneModuleUeberwachen( );
call FUWerte( iErsteMA as Integer, sFUBezeichnung as Message);
call GetSplittByIndex( sInputString as Message, sDelimiter as Message, iIndex as Integer);
call HerBACKUP( );
call HerProViewStart( );
call HideAllPLS( );
call KonfigLesen( );
call KonfigSpeichern( );
call QFFilter( sFiltername as Message);
call QFFilterRegler15Schritt( iReglernummer as Integer);
call QFLuftwerte( Uebergabe as Message);
call QFRinne( sParaSetVariable as Message);
call SessionUserInfoAkt( ABMELDEN as Discrete);
call Sollwertaenderung( HerEventLog as Message);
call StatusExtApp( modul as Message);
call StatusleistenInfofelder( );
call SWReal( );
call wwalmdbtrigger( newalarmTag as Message);
call xAnlagenConfig( );
call xBZVZSettings( );
call xGatawaySettings( );
call xHerGATEWAYSettings( );
call xLoggingConfig( );
call xSetDateiPfade( );
call xSetSQLConfig( sInstanz as Message, sOptIP as Message, sOptPort as Message);
call xSetTSStation( );
call xSetUhrzeitserver( );
call xSTATION1BiosName( );














