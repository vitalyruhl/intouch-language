{#Test codeblock backline}
{Formatting-Test}
{
Changelog:
	V0.0.1		25.10.2021 		ViRu 	define Tests
	V0.0.2		27.10.2021 		ViRu 	add some Tests and modify comments
	V1.0.0		28.10.2021 		ViRu 	add Test for next furures
	V1.1.0		02.11.2021 		ViRu 	Add Comment-Blocks for Nesting and Folding in code without keywords
	V1.1.1		22.01.2022 		ViRu 	Add add test for new issue on dashed variable, test for #region folding
}
{-------------------------------------------}
{>Bug 13.02.2022 Nesting bug -> code in multiline comment will formated to?!}
	{Aufrufbutton:
	    IF MA_UpdateInProgress == 0 THEN
	        IF
	        (SYS_STATION08Online == 0 OR (SYS_STATION08Online == 1 AND STATION8:WU_WochenschaltuhrOffen == 0)) AND
	        (SYS_STATION09Online == 0 OR (SYS_STATION09Online == 1 AND STATION9:WU_WochenschaltuhrOffen == 0)) THEN
	            WU_Nummer = 1;
	        ELSE
	 Show "WU_Warnung";
	        ENDIF;
	    ENDIF;
	}
{<-------------------------------------------}
{-------------------------------------------}
{>Bug 13.02.2022 next not in plan when there are an 'EXIT FOR' satement}
	FOR INDEX = 1 TO cpuen
		ANLAGE = StringTrim(SYS_S7CPU_name,3);
		wcAddItem("WUAuswahl",ANLAGE); 
		LogMessage("DEBUG: " + StringLeft(SYS_TopicTemp,4)+ " / " + SYS_S7CPU_anlagenteil); 
		IF StringLeft(SYS_TopicTemp,4) == SYS_S7CPU_anlagenteil THEN
			WU_AuswahlTemp = SYS_S7CPU_name;
		ENDIF;
	IF INDEX == cpuen THEN EXIT FOR; ENDIF;
	HER_SQLStatus = SQLNext(HER_ConfigConnectionID);
NEXT;
{<-------------------------------------------}
{-------------------------------------------}
{>Futures / Bugs / Issues}
	tmp = "\\share\";{fixed 2021.10.29}
	CALL xGatawaySettings(); {fixed 2021.10.29: No space before and between and after brackets call 'xGatawaySettings ( );'==> 'xGatawaySettings()'}
	ITXStartAppInDirectory(SYS_ToolsPath + "string ( with ) whitespaces test.", SYS_ToolsPath); {fixed 2021.10.29: Remove single spaces `ITXStartAppInDirectory ( SYS_ToolsPath + "\AA_CurrentAlarms2DB.exe", SYS_ToolsPath );` ==> `ITXStartAppInDirectory(SYS_ToolsPath + "\AA_CurrentAlarms2DB.exe", SYS_ToolsPath);`}
{<-------------------------------------------}
{region check single operators}
	SYS_Anlage = -1;{fixed 2021.10.29: no space on -/+ before Number!}
	c = a + b + d - e + f -g - x;{following comment not formatted! -> c=a+b +d - e+ f;}
{# New Region trenner}
	new12-issue-dashed-variable-123 = "this variable shall not be formatted"
{endregion check single operators}
{-------------------------------------------}
{Variable definition:}
{>todo: Nesting on Comment-Block (Block of code below shall be nested and can be foldet)}
	{Comment-Block Folding-String can be changed in Setting between 2 an 10 Character}
	DIM m AS MESSAGE;
	DIM i AS INTEGER;
	DIM d AS DISCRETE;
	DIM r AS REAL;
	StartApp SYS_ToolsPath + "\Scheduler.exe " + SQLServer + " " + Database_user + " " + Database_pwd; 
{<-------------------------------------------}
{>-------------------------------------------<}
	{test for spacing in string --> DONT FORMAT THIS!}
	Funkt = "-"; 
	Funkt = " -"; 
	Funkt = "- "; 
	Funkt = " - "; 
	Funkt = "+/-/<>/==/=/</>"; 
{<------------------------------------------------------------------------------>}
{>------------------------------------------------------------------------------}
	{Test wrong Nesting and inline if - then and Spacings on +/-/<> and other Keywords un strings}
IF sys_Debug_info > 0 THEN LogMessage(eof Funkt + "if one of the keywords is big, and             spacing or 		tab is removed, then its Wrong! | [" + Text(iErsteMA,"#")"]"); ENDIF; 
IF sys_Debug_info > 0 THEN LogMessage(Funkt + "eof if one of eof is big -> its Wrong! | [" + Text(iErsteMA,"#")"]"); ENDIF; 
{# Test codeblock backline}
IF sys_Debug_info > 0 THEN LogMessage(Funkt + "eof if one of eof is big -> its Wrong! | [" + Text(iErsteMA,"#")"]"); ENDIF; 
IF sys_Debug_info > 0 THEN LogMessage(Funkt + "eof if one of eof is big -> its Wrong! | [" + Text(iErsteMA,"#")"]"); ENDIF; 
{<------------------------------------------------------------------------------}
{>------------------------------------------------------------------------------}
	{Test Spacings on +/-/<>/=/==/; }
IF sys_pcname == sys_STATION01BiosName THEN  sys_station = sys_pcname;ENDIF;
IF sys_pcname <= sys_STATION01BiosName THEN  sys_station = sys_pcname;ENDIF;
IF sys_pcname =  > sys_STATION01BiosName THEN  sys_station = sys_pcname;ENDIF;
IF sys_pcname <> sys_STATION01BiosName THEN  sys_station = sys_pcname;ENDIF;
{<------------------------------------------------------------------------------}
{------------------------------------------------------------------------------}
{if-then Nesting-Test}
IF sys_pcname <> sys_STATION01BiosName THEN
	IF sys_pcname <> sys_STATION02BiosName THEN
		IF sys_pcname <> sys_STATION03BiosName THEN
			IF sys_pcname <> sys_STATION04BiosName THEN
				IF sys_pcname <> sys_STATION05BiosName THEN
					IF sys_pcname <> sys_STATION06BiosName THEN
						IF sys_pcname <= sys_STATION07BiosName THEN
							IF sys_pcname =  > sys_STATION08BiosName THEN
								IF sys_pcname =  > sys_STATION09BiosName THEN
									IF sys_STATION01Online THEN
										sys_STATION09BiosName = sys_pcname;
										STATION1:sys_STATION09Online = 1;
									ELSE
										sys_STATION01BiosName = sys_pcname;
									ENDIF;
								ENDIF;
							ENDIF;
						ENDIF;
					ENDIF;
				ENDIF;
			ENDIF;
		ENDIF;
	ENDIF;
ENDIF;
{------------------------------------------------------------------------------}
{------------------------------------------------------------------------------}
{>if-then multiline - test}
	IF	sys_Debug_info > 0 AND
		sys_Debug_info < 100
	THEN
		LogMessage(Funkt + "Erste-MA:[" + Text(iErsteMA,"#")+ "]"); 
	ENDIF;
{<------------------------------------------------------------------------------}
{------------------------------------------------------------------------------}
{nesting-test for}
FOR i = 1 TO StringLen(sInputString){Warum ist index bei Intouch-Strings mit 1 beginnend und nicht 0?}
	SZ = StringMid(sInputString,i,1);
	IF SZ == sDelimiter THEN {Trennzeichen gefunden}
		Splitt = Splitt + 1;
		IF Splitt == iIndex THEN {das richtige Element gefunden}
		IF Sys_Debug_info > 0 THEN LogMessage(Funkt + "True Splitt(" + text(Splitt,"#")+ ")/i:(" + text(i,"#")+ "):[" + Temp_Return + "]"); ENDIF; 
			EXIT FOR;
		ELSE
		IF Sys_Debug_info > 0 THEN LogMessage(Funkt + " Splitt(" + text(i,"#")+ "):[" + Temp_Return + "]"); ENDIF; 
			Temp_Return = ""; 
		ENDIF;
	ELSE
		Temp_Return = Temp_Return + SZ; {Zum Schluss wird der Rest ausgegeben!!!}
	ENDIF;
NEXT;
{------------------------------------------------------------------------------}
{------------------------------------------------------------------------------}
{<Wrong Codeblog-Settings test:
if that if is Big after Formatting, then the code is wrong...
if sys_Debug_info > 0 then LogMessage(Funkt +"Erste-MA:[" + Text(iErsteMA,"#") "]"); endif;
if sys_Debug_info > 0 then LogMessage(Funkt+ "Bezeichnung:["+ sFUBezeichnung + "]"); endif;
{<------------------------------------------------------------------------------}
{>------------------------------------------------------------------------------}
	{Formating-Test comment:
		if that if is Big after Formatting, then the code is wrong...
		if sys_Debug_info > 0 then LogMessage(Funkt +"Erste-MA:[" + Text(iErsteMA,"#") "]"); endif;
		if sys_Debug_info > 0 then LogMessage(Funkt+ "Bezeichnung:["+ sFUBezeichnung + "]"); endif;
{<------------------------------------------------------------------------------}
{------------------------------------------------------------------------------}
{Line-Spacing-Test -> Global standart setting is 1 empty line}
{End epty-line-test}
{-------------------------------------------}